#!/bin/bash
# COLORS
red='\e[0;31m'
green='\e[0;32m'
yellow='\e[0;33m'
cyan='\e[0;36m'
white='\e[0;37m'
# GET GCC VERSION
declare -a Gcc
GetGccVersion() {
   for i in $(exec sudo find /usr/bin/ -name "gcc*"|grep -E "gcc-[0-9]{1,}"|sort -t"-" -nk2);do
      Gcc+=("${i}")
   done
   if (( "${#Gcc[@]}" == 0 ));then
      echo -e "${yellow}GCC compiler not found${white}"
   fi
}
GetGccVersion
# GET GCC VERSION
declare -a Gpp
GetGppVersion() {
   for i in $(exec sudo find /usr/bin/ -name "g\+\+*"|grep -E "g\+\+-[0-9]{1,}"|sort -t"-" -nk2);do
      Gpp+=("${i}")
   done
   if (( "${#Gpp[@]}" == 0 ));then
      echo -e "${yellow}g++ compiler not found${white}"
   fi
   j=0
   for i in "${Gpp[@]}";do
      tmp_gcc=`echo "${Gcc[${j}]}"|awk -F- '{print $NF}'`
      tmp_gpp=`echo "${i}"|awk -F- '{print $NF}'`
      j=$((++j))
      if [[ "${tmp_gcc}" != "${tmp_gpp}" ]];then
         echo -e "${red}The GCC compiler version is not the same as the G++ compiler version${white}"
      fi
   done
}
GetGppVersion
# GET CLANG VERSION
declare -a Clang
GetClangVersion() {
   for i in $(exec sudo find /usr/bin/ -name "clang*"|grep -E "clang-[0-9]{1,}"|sort -t"/" -nk2);do
      Clang+=("${i}")
   done
}
GetClangVersion
# GET CLANG++ VERSION
declare -a Clangpp
GetClangppVersion() {
   for i in $(exec sudo find /usr/bin/ -name "clang\+\+*"|grep -E "clang\+\+-[0-9]{1,}"|sort -t"-" -nk2);do
      Clangpp+=("${i}")
   done
   if (( "${#Clangpp[@]}" == 0 ));then
      echo -e "${yellow}g++ compiler not found${white}"
   fi
   j=0
   for i in "${Clangpp[@]}";do
      tmp_clang=`echo "${Clang[${j}]}"|awk -F- '{print $NF}'`
      tmp_clangpp=`echo "${i}"|awk -F- '{print $NF}'`
      j=$((++j))
      if [[ "${tmp_clang}" != "${tmp_clangpp}" ]];then
         echo -e "${red}The Clang compiler version is not the same as the Clang++ compiler version${white}"
      fi
   done
}
GetClangppVersion
# OUTPUT RESULT CLANG VERSION
OutputResultClangVersion() {
   for i in "${!Clang[@]}";do
      echo "${i}"
   done
}
# OUTPUT RESULT GCC VERSION
OutputResultGccVersion() {
   for i in "${Gcc[@]}";do
      echo "${i}"
   done
}
# OUTPUT RESULT ALL COMPILER VERSION
declare -a Compilers
GetAllCompilerVersion() {
   for i in "${Gcc[@]}";do
      Compilers+=("${i}")
   done
   for i in "${Clang[@]}";do
      Compilers+=("${i}")
   done
}
GetAllCompilerVersion
# OUTPUT RESULT ALL COMPILER++ VERSION
declare -a Compilerspp
GetAllCompilerppVersion() {
   for i in "${Gpp[@]}";do
      Compilerspp+=("${i}")
   done
   for i in "${Clangpp[@]}";do
      Compilerspp+=("${i}")
   done
}
GetAllCompilerppVersion

OutputResultAllCompilerVersion() {
   for i in "${Compilers[@]}";do
      echo -e "${i}"
   done|nl
   echo
}
# GLOBAL VARIABLES
ProjectPath=
ProjectName=
ConfigFile=
Gtest=
# PROJECT PATH
FunctionProjectPath() {
   if [[ -z "${ProjectPath}" ]];then
      echo -ne "${cyan}Enter the project path (by default, the current directory):${white} "
      read ProjectName
      if [[ -z "${ProjectName}" ]];then
         ProjectPath="${PWD}"
      fi
   fi
}
# PROJECT NAME
FunctionProjectName() {
   if [[ -z "${ProjectName}" ]];then
      while true;do
         echo -ne "${cyan}Enter a name for the project:${white} "
         read ProjectName
         if [[ -z "${ProjectName}" ]];then
            echo -e "${red}The project name should not be empty${white}"
         else
            break
         fi
      done
   fi
}
# FUNCTION GTEST
gtest() {
   FunctionProjectPath
   FunctionProjectName
   cd "${ProjectPath}"
   git clone https://github.com/google/googletest.git
   touch ${ProjectName}.hpp
   touch main.cpp
   echo '
#include "googletest/googletest/include/gtest/gtest.h"
int main(int argc, char **argv) {
   ::testing::InitGoogleTest(&argc, argv);
   return RUN_ALL_TESTS();
}'>"${ProjectPath}/main.cpp"
   Gtest="true"
}
# FUNCTION VIMRC
vimrc() {
   FunctionProjectPath
   FunctionProjectName
   echo -ne "${cyan}Enter the name of the configuration file (by default \".vimrc\"):${white}\n"
   read config_file
   # CONFIG FILE
   if [[ -z "${config_file}" ]];then
      ConfigFile=".vimrc"
      if [[ ! -f ".vimrc" ]];then
         touch ".vimrc"
      fi
   else
      ConfigFile="${config_file}"
      if [[ ! -f "${ConfigFile}" ]];then
         touch "${ConfigFile}"
      fi
   fi
   # COMPILERS
   while true;do
      echo -e "${green}The following versions of compilers were found:"
      echo "  GCC:"
      j=0
      { for i in "${Gcc[@]}"; do
         echo $(echo "${i}"|awk -F/ '{print $NF}'
         echo "${Gpp["${j}"]}"|awk -F/ '{print $NF}')
         j=$((++j))
      done }|nl
      echo "   Clang:"
      { j=0; for i in "${Clang[@]}";do
         echo $(echo "${i}"|awk -F/ '{print $NF}'
         echo "${Clangpp["${j}"]}"|awk -F/ '{print $NF}')
         j=$((++j))
      done }|nl -v $(("${#Gcc[@]}"+1))
      echo -e "${white}"
      read -p "Select Compiler: " selected_compiler
      if [ -z "${selected_compiler}" ];then
         echo -e "${red}   The value must be between \"1\" or \"${#Compilers[@]}\". Current value: \"empty\"?${white}"
         continue
      elif [[ !("${selected_compiler}" =~ ^[0-9]{1,}) ]];then
         echo -e "${red}   Incorrect value \"${selected_compiler}\". The value must be between \"1\" or \"${#Compilers[@]}\"${white}"
      elif [[ "${selected_compiler}" == "0" || "${#Compilers[@]}" -lt "${selected_compiler}" ]];then
         echo -e "${red}   Incorrect value \"${selected_compiler}\". The value must be between \"1\" or \"${#Compilers[@]}\"${white}"
         continue
      else
         echo -e "${green} Selected Compiler: \"${Compilers[${selected_compiler}-1]}\"${white}"
         break
      fi
   done
   # CORE
   default_num_cores=$(grep -c ^processor /proc/cpuinfo)
   echo -e "${cyan}Select the number of cores (by default ${default_num_cores}):${white} "
   read -s selected_cores
   if [[ -z "${selected_cores}" ]];then
      selected_cores="${default_num_cores}"
   fi
   # TYPE BUILD
   while true;do
      echo -e "${cyan}Select the type of build (1=Release, 2=Debug(by default)):${white}"
      read selected_type_build
      if [[ -z "${selected_type_build}" ]];then
         selected_type_build="Debug"
         break
      elif [[ "${selected_type_build}" == "1" ]];then
         selected_type_build="Release"
         break
      elif [[ "${selected_type_build}" == "2" ]];then
         selected_type_build="Debug"
         break
      else
         echo -e "${red}The build type is incorrectly entered \"${selected_type_build}\"${white}"
         continue
      fi
   done
   # DEBUG TYPE
   while true;do
      echo -e "${cyan}Select the type of debugging (1=Attach, 2=Launch(by default)):${white}"
      read selected_type_debug
      if [[ -z "${selected_type_debug}" ]];then
         selected_type_debug="Launch"
         break
      elif [[ "${selected_type_debug}" == "1" ]];then
         selected_type_debug="Attach"
         break
      elif [[ "${selected_type_debug}" == "2" ]];then
         selected_type_debug="Launch"
         break
      else
         echo -e "${red}The debug type was entered incorrectly \"${selected_type_debug}\"${white}"
      fi
   done
   echo 'source ~/.vimrc' > "${ProjectPath}/${ConfigFile}"
   echo "
   let \$generate=\"cmake -DCMAKE_BUILD_TYPE=${selected_type_build} -DCMAKE_C_COMPILER=${Compilers[${selected_compiler}-1]} -DCMAKE_CXX_COMPILER=${Compilerspp[${selected_compiler}-1]} -S ${ProjectPath} -B ${ProjectPath}/${ProjectName}-linux\"
   let \$clear=\"rm -r ${ProjectPath}/${ProjectName}-linux\"
   let \$install=\"cmake --build ${ProjectPath}/${ProjectName}-linux/ --target install --config ${selected_type_build}\"
   set makeprg=cmake\ --build\ ${ProjectPath}/${ProjectName}-linux\ -j${selected_cores}
   set errorformat^=../%f:%l:%c\ %m
   set errorformat^=../../%f:%l:%c\ %m
   set errorformat^=../../../%f:%l:%c\ %m
   let g:vimspector_break_on_exception = 0
   let g:vimspector_terminal_maxwidth = 30
   let g:vimspector_code_minwidth = 100
   nnoremap <silent> <leader>vc : call vimspector#Continue()<cr>
   nnoremap <silent> <leader>vl : call vimspector#Launch()<cr>
   nnoremap <silent> <leader>vr : call vimspector#Reset()<cr>
   nnoremap <silent> <c-s> : call vimspector#StepSOver()<cr>
   nnoremap <silent> <leader>si : call vimspector#StepSInto()<cr>
   nnoremap <silent> <leader>sd : call vimspector#ShowDisassambly()<cr>
   nnoremap <silent> <leader>b : call vimspector#ToggleBreakpoint()<cr>
   nnoremap <silent> <leader>vi <Plug>VimspectorBalloonEval<cr>
   nnoremap <silent> <leader>u : call vimspector#UpFrame()<cr>
   nnoremap <silent> <leader>d : call vimspector#DownFrame()<cr>
   nnoremap <silent> <leader>lb : call vimspector#ListBreakpoints()<cr>
   nnoremap <silent> <leader>rc : call vimspector#RunToCursor()<cr>
   nnoremap <silent> <leader>ls : so Session.vim<cr>
   nnoremap <silent>,cb : make!<cr>
   nnoremap <silent>,cd : !exec \$clear<cr>
   nnoremap <silent>,cg : !exec \$generate<cr>
   nnoremap <silent>,ci : !exec \$install<cr>
   nnoremap <silent>,cr : !exec ${ProjectPath}/${ProjectName}-linux/${ProjectName}<cr>
   ">>"${ProjectPath}/${ConfigFile}"
   if [[ "${selected_type_debug}" == "Launch" ]];then
      echo "
      let g:vimspector_configurations = {
      \		\"launch\": {
      \			\"adapter\": \"vscode-cpptools\", 
      \			\"configuration\": {
      \				\"request\": \"launch\",
      \				\"program\": \"${ProjectPath}/${ProjectName}-linux/${ProjectName}\",
      \           \"args\":[],
      \           \"cwd\":\"${ProjectPath}/${ProjectName}-linux/\",
      \           \"environment\":[],
      \				\"MIMode\": \"gdb\",
      \				\"setupCommands\":[
      \						{\"text\":\"-enable-pretty-printing\",\"ignoreFailures\":\"false\"},
      \                  {\"text\":\"set disassembly-flavor intel\",\"ignoreFailures\":\"false\"}
      \				]
      \         }
      \         }
      \	}">>"${ProjectPath}/${ConfigFile}"
   elif [[ "${selected_type_debug}" == "Attach" ]];then
      echo "
      let g:vimspector_configurations = {
      \		\"attach\": {
      \			\"adapter\": \"vscode-cpptools\", 
      \			\"variables\": {
      \				\"pid\": {
      \					\"shell\": [
      \						\"/bin/bash\",
      \						\"-c\",
      \						\"pgrep utils | sort | tail -1\"
      \					]
      \				}
      \			},
      \			\"configuration\": {
      \				\"request\": \"attach\",
      \				\"program\": \"${ProjectPath}/${ProjectName}-linux/${ProjectName}\",
      \           \"cwd\":\"${ProjectPath}/${ProjectName}-linux/\",
      \           \"environment\":[],
      \           \"processId\":\"${pid}\",
      \				\"MIMode\": \"gdb\",
      \				\"setupCommands\":[
      \						{\"text\":\"-enable-pretty-printing\",\"ignoreFailures\":\"false\"},
      \                  {\"text\":\"set disassembly-flavor intel\",\"ignoreFailures\":\"false\"}
      \				]
      \         }
      \         }
      \	}">>"${ProjectPath}/${ConfigFile}"
   fi
}
# FUNCTION CMAKE
cmake() {
   FunctionProjectPath
   FunctionProjectName
   touch "${ProjectPath}/CMakeLists.txt"
   if [[ -z "${Gtest}" ]];then
      echo -ne "Download GTEST? (yes/no)"
      read isgtest
      if [[ "${isgtest}" == "y" || "${isgtest}" == "yes" ]];then
         gtest
      fi
   fi
   echo "
cmake_minimum_required(VERSION 3.22)
project(${ProjectName})
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
   set(SRC
   main.cpp
   ${ProjectName}.hpp
)">"${ProjectPath}/CMakeLists.txt"

if [[ "${Gtest}" == "true"  ]];then
   echo "
   add_subdirectory(./googletest gtest)
   ">>"${ProjectPath}/CMakeLists.txt"
fi
echo "
add_executable(\${PROJECT_NAME} \${SRC})">>"${ProjectPath}/CMakeLists.txt"
if [[ "${Gtest}" == "true" ]];then
   echo "
   target_link_libraries(\${PROJECT_NAME} PRIVATE gtest_main)
   ">>"${ProjectPath}/CMakeLists.txt"
else
   echo "
   target_link_libraries(\${PROJECT_NAME})
   ">>"${ProjectPath}/CMakeLists.txt"
fi
echo "
add_custom_command(TARGET \${PROJECT_NAME} POST_BUILD
   COMMAND \${CMAKE_COMMAND} -E copy \${CMAKE_BINARY_DIR}/compile_commands.json \${CMAKE_SOURCE_DIR}/compile_commands.json
)
">>"${ProjectPath}/CMakeLists.txt"
}
# CONSTANTS
# MAIN LOOP
while true;do
   echo -ne "${cyan}1. Download GTEST:${white}\n"
   echo -ne "${cyan}2. Creating a configuration file \".vimrc\":${white}\n"
   echo -ne "${cyan}3. To create a file \"CMakeLists.txt\":${white}\n"
   read cur_num
   case "${cur_num}" in
      1)
         ehco "gtest"
         ;;
      2)
         vimrc
         ;;
      3)
         cmake
         ;;
   esac
done
