import os
def Googletest():
    main = open("main.cpp","w+")
    main.write('#include "googletest/googletest/include/gtest/gtest.h"\n')
    main.write('int main(int argc, char **argv) {\n')
    main.write('   ::testing::InitGoogleTest(&argc, argv);\n')
    main.write('   return RUN_ALL_TESTS();\n')
    main.write('}\n')
def Benchmark(isGoogleTest):
    main = open("main.cpp","w+")
    main.write('#include "benchmark/benchmark.h\n')
    if isGoogleTest:
        main.write('#include "gtest/gtest.h')
        main.write('static void BM_StringCreation(benchmark::State& state) {\n')
        main.write('for (auto _ : state)\n')
        main.write('	std::string empty_string;\n')
        main.write('}\n')
        main.write('// Register the function as a benchmark\n')
        main.write('BENCHMARK(BM_StringCreation);\n')
        main.write('\n')
        main.write('// Define another benchmark\n')
        main.write('static void BM_StringCopy(benchmark::State& state) {\n')
        main.write('std::string x = "hello";\n')
        main.write('for (auto _ : state)\n')
        main.write('	std::string copy(x);\n')
        main.write('}\n')
        main.write('BENCHMARK(BM_StringCopy);\n')
        main.write('int main(int argc, char **argv) {\n')
        main.write('	::benchmark::RunSpecifiedBenchmarks();\n')
        main.write('	::testing::InitGoogleTest(&argc, argv);\n')
        main.write('	return RUN_ALL_TESTS();\n')
        main.write('}\n')
    else:
        main.write('BENCHMARK_MAIN();')
